@inject Microsoft.Extensions.Options.IOptions<Lib.Services.Core.AdminSettings> adminsetting;


<div class="card">
    <h5 class="card-header">Subscribers <small>Listing all library subscribers</small></h5>
    <div class="card-body">
        <table id="subscriberDatatable" class="table table-striped table-bordered" width="100%" cellspacing="0">
            <thead>
                <tr>
                    <th>#Id</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Books</th>
                    <th>Created At</th>
                    <th>Action</th>
                </tr>
            </thead>
        </table>
    </div>
</div>


@section scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>

        var $table = $('#subscriberDatatable').dataTable({
            responsive: true,
            dom: 'Bfrtip',
            buttons: [
                {
                    text: 'Add Subscriber',
                    titleAttr: 'Add new Subscriber',
                    attr: { id: 'addnewsubscriberBtn' },
                    className: "btn btn-outline-primary",
                    action: function (e, dt, node, config) {
                        
                        onAddUpdateSubscriber(e.currentTarget, '');

                    },
                    init: function (api, node, config) {
                        $(node).removeClass('dt-button').prepend('<span class="tf-icons bx bx-book-add"></span> ')
                        //$('span', node).addClass('tf-icons bx bx-folder-plus').html('');
                    }
                }
            ],
            processing: true,
            serverSide: true,
            ordering: false,
            filter: true,
            ajax: {
                "url": "@Url.Action("GetSubscriberPaging","Subscribers")",
                "type": "POST",
                "datatype": "json",
                "error": function (jqXHR, textStatus, errorThrown) {
                    if (typeof jqXHR?.responseJSON?.isSuccess !== "undefined")
                        showWarningToast(jqXHR.responseJSON.message)
                }
            },
            columns: [
                { "data": "id", "width": 300 },
                { "data": "firstname", "autoWidth": true },
                { "data": "lastname", "autoWidth": true },
                {
                    "data": "totalbook", "autoWidth": true,
                    "render": (data, row) => {
                        return `All (` + data + `)`;
                        //return `<button
                        //        type="button"
                        //        class="btn btn-primary text-nowrap"
                        //        data-bs-toggle="popover"
                        //        data-bs-offset="0,14"
                        //        data-bs-placement="top"
                        //        data-bs-html="true"
                        //        data-bs-content="<p>This is a very beautiful popover, show some love.</p> <div class='d-flex justify-content-between'><button type='button' class='btn btn-sm btn-outline-secondary'>Skip</button><button type='button' class='btn btn-sm btn-primary'>Read More</button></div>"
                        //        title="Popover Title">
                        //        Popover on top
                        //      </button><button type="button" class="btn btn-sm"> See All (` + data + `)</button>`;
                    }
                },
                {
                    "data": "createdAt", "width": 100, "render": function (data) {
                        var date = new Date(data);
                        var month = date.getMonth() + 1;
                        var day = date.getDate();
                        return date.getFullYear() + "/"
                            + (month.length > 1 ? month : "0" + month) + "/"
                            + ("0" + day).slice(-2);
                        //return date format like 2000/01/01;
                    },
                },
                {
                    "data": "id", "width": 100,
                    "render":
                        function (data, row) {
                            return `
                                                            <button onclick=onAddUpdateSubscriber(this,'` + data + `')
                                                         type="button" class="btn-sm btn btn-icon btn-outline-primary">
                                                         <span class="tf-icons bx bx-edit"></span>
                                                    </button>

                                                            <button onclick=onDetailSubscriber(this,'` + data + `')
                                                        type="button" class="btn-sm btn btn-icon btn-outline-info">
                                                        <span class="tf-icons bx bx-detail"></span>
                                                    </button>

                                                            <button onclick=onDeleteSubscriber(this,'` + data + `')
                                                        type="button" class="btn-sm btn btn-icon btn-outline-danger">
                                                        <span class="tf-icons bx bx-trash"></span>
                                                    </button>
                                                           `;
                        }
                },
            ]
        });

        var onAddUpdateSubscriber = (elm, id) => {
            $('#modelCenterDynamicContent').load("/GetSubscriber/" + id, (response, status, xhr) => {
                if (xhr.status != 200) {
                    showWarningToast(JSON.parse(response).message);
                }
                else {
                    $("#modalCenter").modal("show");
                    setTimeout(() => {
                        formValiderRefresh();
                    }, 1000)
                }

            });
        }

        var onSubscriberSubmit = (elm, e) => {
            e.preventDefault();
            var $form = $(elm);

            $.post($form.attr("action"), $form.serialize())
                .done((dt, status, req) => {
                    
                    $table.api().ajax.reload(null, false);
                    $("#modalCenter").modal("hide");
                })
                .fail((jqXHR, res, d) => {
                    debugger
                    if (typeof jqXHR?.responseJSON?.isSuccess !== "undefined")
                        showWarningToast(jqXHR.responseJSON.message)
                })


        }

        var onDeleteSubscriber = (elm, id) => {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "DELETE",
                        url: "/DeleteSubscriber/" + id
                    })
                        .done((data) => {
                            $table.api().ajax.reload(null, false);
                            showSuccessToast("Your file has been deleted");
                        })
                        .fail((jqXHR, textStatus, errorThrown) => {
                            
                            if (typeof jqXHR?.responseJSON?.isSuccess !== "undefined")
                                showWarningToast(jqXHR.responseJSON.message)
                        });
                }
            })


        }

        var onDetailSubscriber = (elm, id) => {
            $('#modelCenterDynamicContent').load("/GetDetailSubscriber/" + id, (response, status, xhr) => {
                if (xhr.status != 200) {
                    showWarningToast(JSON.parse(response).message);
                }
                else {
                    $("#modalCenter").modal("show");
                    setTimeout(() => {
                        formValiderRefresh();
                    }, 1000)
                }

            });
        }

        
        var onAddBook = (elm) => {
            
            let subscriber_books_collection = document.querySelector("#subscriber_books_collection");
            let inputName = subscriber_books_collection.dataset.key;;
            
            let maxbookallowed = @adminsetting.Value.MaxLoanedAmount;
            let books = [...document.querySelectorAll("#selected_books_container input[type='hidden']")];
            let selectedBooks = [...document.querySelectorAll('#available_books_container input[type="checkbox"]:checked')];
            if (books.length >= maxbookallowed || selectedBooks.length > maxbookallowed) {
                showWarningToast("A subscriber can loan up to " + maxbookallowed + " books");
                return;
            }
            let leftSelectedBooks = selectedBooks.map(s => {
                
                let $span = s.parentElement;
                $(generateInput(inputName, s.value)).appendTo($span);

                $($span).prependTo("#selected_books_container");
                return s;
            });

        }
        var onRemoveBook = (elm) => {
            debugger;
            let subscriber_books_collection = document.querySelector("#subscriber_books_collection");
            let inputName = subscriber_books_collection.dataset.key;;

            let rightSelectedBooks = [...document.querySelectorAll('#selected_books_container input[type="checkbox"]:checked')].map(s => {
                
                let $span = s.parentElement;
                $('input[type="hidden"]', $span).remove();
                $($span).prependTo("#available_books_container");
                return s;
            });
            
        }

       

        var generateInput = (name, val) => {
            var newElement = document.createElement('input');
            newElement.setAttribute('type', 'hidden');
            newElement.setAttribute('value', val);
            newElement.setAttribute('name', name);
            return newElement;
        }
    </script>


}


